{"version":3,"sources":["client.js","documents.js","ProtectedRoute.js","index.js","utils.js"],"names":["httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","_ref","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","JOIN_ROOM_MUTATION","gql","_templateObject","SUBSCRIBE_TO_ROOM_BY_NAME","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","ROOM_BY_NAME_QUERY","_templateObject7","SUBMIT_RESPONSE_FOR_QUESTION","_templateObject8","_templateObject9","CREATE_ROOM_MUTATION","_templateObject10","_templateObject11","SUBMIT_QUESTION_MUTATION","_templateObject12","NEXT_ROUND_MUTATION","_templateObject13","ProtectedRoute","Comp","component","loggedIn","path","rest","Object","objectWithoutProperties","react_default","a","createElement","react_router","assign","render","props","to","Context","React","createContext","JoinForm","handleSubmit","_useState","useState","_useState2","slicedToArray","code","setCode","_useState3","_useState4","name","setName","console","log","onSubmit","e","value","onChange","target","placeholder","CreateForm","_ref2","_useState5","_useState6","Math","random","toString","replace","substr","toUpperCase","Users","_ref3","data","map","user","key","id","Result","_ref4","guess","answer","abs","computeScore","ExistingQuestion","_ref5","roundOver","useContext","_useState7","_useState8","setValue","_useMutation","useMutation","docs","submitResponse","_useMutation3","nextRound","userResponse","L","owner","responses","Fragment","src_Result","score","rottenTomatoes","onClick","variables","roomId","room","preventDefault","userId","questionId","Question","_ref6","nUsers","_useState9","_useState10","question","setQuestion","_useMutation5","submitQuestion","_useState11","_useState12","setRoundOver","useEffect","length","state","src_ExistingQuestion","title","fetch","concat","then","_ref7","asyncToGenerator","regenerator_default","mark","_callee","resp","json","wrap","_context","prev","next","sent","description","imageUrl","poster","reception","stop","_x","apply","this","arguments","catch","err","error","Room","_ref8","match","params","useSubscription","loading","src_Question","questions","round","users","src_Users","Main","_useState13","_useState14","setState","_useContext2","setUser","_useState15","_useState16","userName","setUserName","_useState17","_useState18","setRoom","history","useHistory","_useMutation7","_useMutation8","joinRoom","joinRoomResp","_useLazyQuery","useLazyQuery","_useLazyQuery2","roomByName","roomByNameResp","_useMutation9","_useMutation10","createRoom","createRoomResp","insert_user","returning","push","_ref9","roomName","src_JoinForm","src_CreateForm","StateProvider","_ref10","children","_useState19","_useState20","Provider","Routes","exact","src_ProtectedRoute","rootElement","document","getElementById","ReactDOM","react_common_esm","src_StateProvider","react_router_dom","basename","src_Routes"],"mappings":"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","file":"static/js/main.20ee454d.chunk.js","sourcesContent":["import { split } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: \"https://graphql-number-guessing-game.herokuapp.com/v1/graphql\"\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `wss://graphql-number-guessing-game.herokuapp.com/v1/graphql`,\n  options: {\n    reconnect: true\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n  // for SSR, use:\n  // cache: new Cache().restore(window.__APOLLO_STATE__ || {})\n});\n\nexport default client;\n","import gql from \"graphql-tag\";\n\nexport const JOIN_ROOM_MUTATION = gql`\n  mutation CreateUser($name: String, $roomId: uuid) {\n    insert_user(objects: [{ name: $name, room_id: $roomId }]) {\n      affected_rows\n      returning {\n        id\n        name\n        room {\n          name\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport const USERS_IN_ROOM_SUBSCRIPTION = gql`\n  subscription UsersInRoomSubscription($roomName: String) {\n    user(where: { room: { name: { _eq: $roomName } } }) {\n      id\n      name\n    }\n  }\n`;\n\nexport const USERS_IN_ROOM_QUERY = gql`\n  query UsersInRoomQuery($roomName: String) {\n    user(where: { room: { name: { _eq: $roomName } } }) {\n      id\n      name\n    }\n  }\n`;\n\nexport const ROOM_QUERY = gql`\n  query Room($name: String) {\n    room(where: { name: { _eq: $name } }, distinct_on: name) {\n      id\n      name\n      questions(order_by: { created_at: desc }) {\n        id\n        name\n        created_at\n        answer\n        responses {\n          value\n          owner {\n            name\n          }\n        }\n      }\n      users {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_ROOM = gql`\n  subscription SubscribeToRoom($roomId: uuid!) {\n    room_by_pk(id: $roomId) {\n      questions(order_by: { created_at: desc }) {\n        id\n        name\n        created_at\n        answer\n        responses {\n          value\n          owner {\n            name\n          }\n        }\n      }\n      users {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_ROOM_BY_NAME = gql`\n  subscription SubscribeToRoom($name: String) {\n    room(where: { name: { _eq: $name } }) {\n      id\n      state\n      name\n      round\n      questions(order_by: { created_at: asc }) {\n        id\n        name\n        state\n        created_at\n        answer\n        room {\n          id\n          round\n        }\n        responses {\n          value\n          owner {\n            id\n            name\n          }\n        }\n      }\n      users {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ROOM_BY_NAME_QUERY = gql`\n  query FindRoomByName($name: String) {\n    room(where: { name: { _eq: $name } }) {\n      id\n      name\n    }\n  }\n`;\n\n// export const CREATE_ROOM_MUTATION = gql`\n//   mutation CreateRoom($roomName: String, $userName: String) {\n//     insert_room(\n//       objects: [{ name: $roomName, users: { data: [{ name: $userName }] } }]\n//     ) {\n//       returning {\n//         id\n//       }\n//       affected_rows\n//     }\n//   }\n// `;\n\nexport const GET_RESPONSE_FOR_QUESTION_QUERY = gql`\n  query GetAnswer($questionId: uuid, $userId: uuid) {\n    response(\n      limit: 1\n      where: { question_id: { _eq: $questionId }, owner_id: { _eq: $userId } }\n    ) {\n      id\n      value\n    }\n  }\n`;\n\nexport const SUBMIT_RESPONSE_FOR_QUESTION = gql`\n  mutation SubmitAnswer($questionId: uuid, $userId: uuid, $value: Int) {\n    insert_response(\n      objects: [{ question_id: $questionId, owner_id: $userId, value: $value }]\n    ) {\n      affected_rows\n      returning {\n        id\n        value\n      }\n    }\n  }\n`;\n\nexport const RESPONSE_FOR_QUESTION_SUBSCRIPTION = gql`\n  subscription SubscribeToAnswer($questionId: uuid, $userId: uuid) {\n    response(\n      where: { question_id: { _eq: $questionId }, owner_id: { _eq: $userId } }\n      order_by: { created_at: desc }\n      limit: 1\n    ) {\n      id\n      value\n      question {\n        name\n        answer\n      }\n    }\n  }\n`;\n\nexport const CREATE_ROOM_MUTATION = gql`\n  mutation CreateRoomAndUser($userName: String, $roomName: String) {\n    insert_user(\n      objects: [{ name: $userName, room: { data: { name: $roomName } } }]\n    ) {\n      affected_rows\n      returning {\n        id\n        name\n        room {\n          name\n          id\n        }\n      }\n    }\n  }\n`;\nexport const SUBMIT_QUESTION_MUTATION = gql`\n  mutation SubmitQuestion(\n    $roomId: uuid!\n    $name: String\n    $description: String\n    $imageUrl: String\n    $answer: json\n  ) {\n    insert_question(\n      objects: [\n        {\n          room_id: $roomId\n          name: $name\n          description: $description\n          imageUrl: $imageUrl\n          answer: $answer\n        }\n      ]\n    ) {\n      affected_rows\n      returning {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const NEXT_ROUND_MUTATION = gql`\n  mutation NextRound($roomId: uuid) {\n    update_room(_inc: { round: 1 }, where: { id: { _eq: $roomId } }) {\n      returning {\n        id\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\n\nconst ProtectedRoute = ({ component: Comp, loggedIn, path, ...rest }) => {\n  return (\n    <Route\n      path={path}\n      {...rest}\n      render={props => {\n        return loggedIn ? <Comp {...props} /> : <Redirect to=\"/\" />;\n      }}\n    />\n  );\n};\n\nexport default ProtectedRoute;\n","import {\n  useLazyQuery,\n  useMutation,\n  useSubscription\n} from \"@apollo/react-hooks\";\nimport * as L from \"partial.lenses\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport ReactDOM from \"react-dom\";\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  useHistory\n} from \"react-router-dom\";\nimport client from \"./client\";\nimport * as docs from \"./documents\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport \"./styles.css\";\nimport { computeScore, generateCode } from \"./utils\";\n\nconst searchUrl = title =>\n  `https://kha9mwfrdb.execute-api.us-east-1.amazonaws.com/dev/search/${title}`;\n\nconst Context = React.createContext();\n\nconst JoinForm = ({ handleSubmit }) => {\n  const [code, setCode] = useState(null);\n  const [name, setName] = useState(null);\n  console.log(\"name\", name);\n  return (\n    <form onSubmit={e => handleSubmit(e, { name, code })}>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n        placeholder=\"Name\"\n      />\n      <input\n        value={code}\n        onChange={e => setCode(e.target.value)}\n        placeholder=\"Room Code\"\n      />\n      <button>submit</button>\n    </form>\n  );\n};\n\nconst CreateForm = ({ handleSubmit }) => {\n  const [name, setName] = useState(null);\n  const code = generateCode();\n  return (\n    <form onSubmit={e => handleSubmit(e, { name, code })}>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n        placeholder=\"Name\"\n      />\n      <button>submit</button>\n    </form>\n  );\n};\n\nconst Users = ({ data }) => {\n  return (\n    <ul>\n      {data.map(user => {\n        return <li key={user.id}>{user.name}</li>;\n      })}\n    </ul>\n  );\n};\n\nconst Result = ({ guess, answer }) => {\n  return (\n    <div>\n      <div>Your Answer: {guess}</div>\n      <div>Correct Answer: {answer}</div>\n      <div>Score: {computeScore(guess, answer)}</div>\n    </div>\n  );\n};\n\nconst ExistingQuestion = ({ data, roundOver }) => {\n  const { user } = useContext(Context);\n  const [value, setValue] = useState(null);\n  const [submitResponse] = useMutation(docs.SUBMIT_RESPONSE_FOR_QUESTION);\n  const [nextRound] = useMutation(docs.NEXT_ROUND_MUTATION);\n  const userResponse = L.get(\n    [L.whereEq({ owner: { id: user.id } })],\n    data.responses\n  );\n  if (!userResponse) {\n    return (\n      <div>\n        <h3>Question id: {data.id}</h3>\n        <h3>User ID: {user.id}</h3>\n        <span>{user.name}'s answer:</span>\n        <form\n          onSubmit={e => {\n            e.preventDefault();\n            submitResponse({\n              variables: {\n                userId: user.id,\n                questionId: data.id,\n                value\n              }\n            });\n          }}\n        >\n          <input\n            placeholder=\"Answer\"\n            onChange={e => setValue(e.target.value)}\n            value={value}\n          />\n          <button>submit</button>\n        </form>\n      </div>\n    );\n  }\n  if (data.answer && roundOver) {\n    return (\n      <>\n        <Result\n          guess={userResponse.value}\n          answer={data.answer.score.rottenTomatoes}\n        />\n        <button\n          onClick={() => {\n            nextRound({ variables: { roomId: data.room.id } });\n          }}\n        >\n          next round\n        </button>\n      </>\n    );\n  }\n  return (\n    <div>\n      <span>Current Answer: {userResponse.value}</span>\n      <button>end round</button>\n    </div>\n  );\n};\n\nconst Question = ({ data, nUsers, roomId }) => {\n  const [question, setQuestion] = useState(null);\n  const [submitQuestion] = useMutation(docs.SUBMIT_QUESTION_MUTATION);\n  const [roundOver, setRoundOver] = useState(false);\n  console.log(\"data.responses\", data);\n  useEffect(() => {\n    if (data && nUsers === data.responses.length) {\n      setRoundOver(true);\n    } else {\n      setRoundOver(false);\n    }\n  }, [data]);\n  if (data) {\n    console.log(\"data.responses\", data.responses);\n    return (\n      <>\n        <h3>Question: {data.name}</h3>\n        <h4>Question State: {data.state}</h4>\n        <ExistingQuestion data={data} roundOver={roundOver} />\n      </>\n    );\n  }\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetch(searchUrl(question))\n      .then(async resp => {\n        const json = await resp.json();\n        console.log(\"here2\", json);\n        submitQuestion({\n          variables: {\n            roomId: roomId,\n            description: json.description,\n            imageUrl: json.poster,\n            name: json.title,\n            answer: json.reception\n          }\n        });\n        setQuestion(null);\n      })\n      .catch(err => {\n        console.error(\"error!\", err);\n      });\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          placeholder=\"Question...\"\n          value={question}\n          onChange={e => setQuestion(e.target.value)}\n        />\n        <button>submit</button>\n      </form>\n    </div>\n  );\n};\n\nconst Room = ({\n  match: {\n    params: { name }\n  }\n}) => {\n  const resp = useSubscription(docs.SUBSCRIBE_TO_ROOM_BY_NAME, {\n    variables: { name }\n  });\n  if (resp.loading) {\n    return \"Loading...\";\n  }\n  const data = resp.data.room[0];\n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <h3>Room ID: {data.id}</h3>\n      <h4>State: {data.state}</h4>\n      <Question\n        data={data.questions[data.round]}\n        roomId={data.id}\n        nUsers={data.users.length}\n      />\n      <Users data={data.users} />\n    </div>\n  );\n};\n\nconst Main = () => {\n  const [state, setState] = useState();\n  const { user, setUser } = useContext(Context);\n  const [userName, setUserName] = useState();\n  const [room, setRoom] = useState({});\n  const history = useHistory();\n  const [joinRoom, joinRoomResp] = useMutation(docs.JOIN_ROOM_MUTATION);\n  const [roomByName, roomByNameResp] = useLazyQuery(docs.ROOM_BY_NAME_QUERY);\n  const [createRoom, createRoomResp] = useMutation(docs.CREATE_ROOM_MUTATION);\n  useEffect(() => {\n    if (!roomByNameResp.loading) {\n      if (roomByNameResp.data && roomByNameResp.data.room.length) {\n        setRoom(roomByNameResp.data.room[0]);\n      }\n    }\n  }, [roomByNameResp]);\n\n  useEffect(() => {\n    if (room.id) {\n      joinRoom({ variables: { name: userName, roomId: room.id } });\n    }\n  }, [room.id, userName, joinRoom]);\n\n  useEffect(() => {\n    if (joinRoomResp.data) {\n      setUser(joinRoomResp.data.insert_user.returning[0]);\n    }\n  }, [joinRoomResp.data, setUser, history]);\n\n  useEffect(() => {\n    if (user) {\n      history.push(`/game/${user.room.name}`);\n    }\n  }, [user, history]);\n\n  useEffect(() => {\n    if (createRoomResp.data) {\n      setUser(createRoomResp.data.insert_user.returning[0]);\n    }\n  }, [createRoomResp]);\n\n  const handleSubmit = (e, { name, code }) => {\n    e.preventDefault();\n    if (state === \"join\") {\n      roomByName({ variables: { name: code } });\n      setUserName(name);\n    } else if (state === \"create\") {\n      createRoom({ variables: { userName: name, roomName: code } });\n    }\n  };\n\n  if (!state) {\n    return (\n      <div>\n        <button onClick={() => setState(\"create\")}>create</button>\n        <button onClick={() => setState(\"join\")}>join</button>\n      </div>\n    );\n  } else if (state === \"join\") {\n    return <JoinForm handleSubmit={handleSubmit} />;\n  } else if (state === \"create\") {\n    return <CreateForm handleSubmit={handleSubmit} />;\n  }\n};\n\nconst StateProvider = ({ children }) => {\n  const [user, setUser] = useState();\n  return (\n    <Context.Provider value={{ user, setUser }}>{children}</Context.Provider>\n  );\n};\n\nconst Routes = () => {\n  const { user } = useContext(Context);\n  return (\n    <>\n      <Route path=\"/\" exact component={Main} />\n      <ProtectedRoute\n        path=\"/game/:name\"\n        component={Room}\n        loggedIn={user ? true : false}\n      />\n    </>\n  );\n};\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <StateProvider>\n        <Router basename=\"/\">\n          <Switch>\n            <Routes />\n          </Switch>\n        </Router>\n      </StateProvider>\n    </ApolloProvider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n","export const generateCode = () =>\n  Math.random()\n    .toString(36)\n    .replace(/[^a-z]+/g, \"\")\n    .substr(0, 4)\n    .toUpperCase();\n\nexport const computeScore = (guess, answer) => {\n  if (guess === answer) {\n    return -5;\n  }\n  return Math.abs(answer - guess);\n};\n"],"sourceRoot":""}