{"version":3,"sources":["client.js","documents.js","index.js"],"names":["httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","_ref","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","JOIN_ROOM_MUTATION","gql","_templateObject","USERS_IN_ROOM_SUBSCRIPTION","_templateObject2","USERS_IN_ROOM_QUERY","_templateObject3","ROOM_QUERY","_templateObject4","SUBSCRIBE_TO_ROOM","_templateObject5","ROOM_BY_NAME_QUERY","_templateObject6","CREATE_ROOM_MUTATION","_templateObject7","Context","React","createContext","ProtectedRoute","Comp","component","loggedIn","path","rest","Object","objectWithoutProperties","react_default","a","createElement","react_router","assign","render","props","to","JoinForm","_ref2","handleSubmit","_useState","useState","_useState2","slicedToArray","code","setCode","_useState3","_useState4","name","setName","console","log","onSubmit","e","value","onChange","target","placeholder","Users","_ref3","_useQuery","useQuery","docs","variables","roomName","data","subscribeToMore","loading","useEffect","document","updateQuery","prev","_ref4","subscriptionData","L","user","map","key","id","Question","_ref5","useContext","Room","_ref6","match","params","resp","room","roomId","_ref7","room_by_pk","users","questions","src_Question","src_Users","Main","_useState5","_useState6","state","setState","_useContext2","setUser","_useState7","_useState8","userName","setUserName","_useState9","_useState10","setRoom","history","useHistory","_useMutation","useMutation","_useMutation3","_useMutation4","joinRoom","joinRoomResp","_useLazyQuery","useLazyQuery","_useLazyQuery2","roomByName","roomByNameResp","length","insert_user","returning","push","concat","src_JoinForm","_ref8","preventDefault","onClick","StateProvider","_ref9","children","_useState11","_useState12","Provider","Routes","Fragment","exact","src_ProtectedRoute","rootElement","getElementById","ReactDOM","react_common_esm","src_StateProvider","react_router_dom","basename","src_Routes"],"mappings":"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","file":"static/js/main.e3097ade.chunk.js","sourcesContent":["import { split } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\n// Create an http link:\nconst httpLink = new HttpLink({\n  uri: \"https://graphql-number-guessing-game.herokuapp.com/v1/graphql\"\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `wss://graphql-number-guessing-game.herokuapp.com/v1/graphql`,\n  options: {\n    reconnect: true\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n  // for SSR, use:\n  // cache: new Cache().restore(window.__APOLLO_STATE__ || {})\n});\n\nexport default client;\n","import gql from \"graphql-tag\";\n\nexport const JOIN_ROOM_MUTATION = gql`\n  mutation CreateUser($name: String, $roomId: uuid) {\n    insert_user(objects: [{ name: $name, room_id: $roomId }]) {\n      affected_rows\n      returning {\n        id\n        name\n        room {\n          name\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport const USERS_IN_ROOM_SUBSCRIPTION = gql`\n  subscription UsersInRoomSubscription($roomName: String) {\n    user(where: { room: { name: { _eq: $roomName } } }) {\n      id\n      name\n    }\n  }\n`;\n\nexport const USERS_IN_ROOM_QUERY = gql`\n  query UsersInRoomQuery($roomName: String) {\n    user(where: { room: { name: { _eq: $roomName } } }) {\n      id\n      name\n    }\n  }\n`;\n\nexport const ROOM_QUERY = gql`\n  query Room($name: String) {\n    room(where: { name: { _eq: $name } }, distinct_on: name) {\n      id\n      name\n      questions(order_by: { created_at: desc }) {\n        id\n        name\n        created_at\n        answer\n        responses {\n          value\n          owner {\n            name\n          }\n        }\n      }\n      users {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_ROOM = gql`\n  subscription SubscribeToRoom($roomId: uuid!) {\n    room_by_pk(id: $roomId) {\n      questions(order_by: { created_at: desc }) {\n        id\n        name\n        created_at\n        answer\n        responses {\n          value\n          owner {\n            name\n          }\n        }\n      }\n      users {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ROOM_BY_NAME_QUERY = gql`\n  query FindRoomByName($name: String) {\n    room(where: { name: { _eq: $name } }) {\n      id\n      name\n    }\n  }\n`;\nexport const CREATE_ROOM_MUTATION = gql`\n  mutation CreateRoom($roomName: String, $userName: String) {\n    insert_room(objects: [{ name: $roomName, users: { data: [{ name: $userName }] } }]) {\n      returning {\n        id\n      }\n      affected_rows\n    }\n  }\n`;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { ApolloProvider } from \"react-apollo\";\nimport {\n  useQuery,\n  useLazyQuery,\n  useMutation,\n  useApolloClient\n} from \"@apollo/react-hooks\";\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n  useHistory\n} from \"react-router-dom\";\nimport client from \"./client\";\nimport * as R from \"ramda\";\nimport * as docs from \"./documents\";\nimport * as L from \"partial.lenses\";\nimport \"./styles.css\";\n\nconst Context = React.createContext();\n\nconst ProtectedRoute = ({ component: Comp, loggedIn, path, ...rest }) => {\n  return (\n    <Route\n      path={path}\n      {...rest}\n      render={props => {\n        return loggedIn ? <Comp {...props} /> : <Redirect to=\"/\" />;\n      }}\n    />\n  );\n};\n\nconst JoinForm = ({ handleSubmit }) => {\n  const [code, setCode] = useState(null);\n  const [name, setName] = useState(null);\n  console.log(\"name\", name);\n  return (\n    <form onSubmit={e => handleSubmit(e, { name, code })}>\n      <input\n        value={name}\n        onChange={e => setName(e.target.value)}\n        placeholder=\"Name\"\n      />\n      <input\n        value={code}\n        onChange={e => setCode(e.target.value)}\n        placeholder=\"Room Code\"\n      />\n      <button>submit</button>\n    </form>\n  );\n};\n\nconst Users = ({ name }) => {\n  const { data, subscribeToMore, loading } = useQuery(\n    docs.USERS_IN_ROOM_QUERY,\n    {\n      variables: { roomName: name }\n    }\n  );\n  useEffect(() => {\n    if (!loading) {\n      subscribeToMore({\n        document: docs.USERS_IN_ROOM_SUBSCRIPTION,\n        variables: { roomName: name },\n        updateQuery: (prev, { subscriptionData: { data } }) => {\n          if (!data) return prev;\n          return L.set([\"user\"], data.user, prev);\n        }\n      });\n    }\n  }, [loading, name, subscribeToMore]);\n  if (loading) {\n    return \"Loading...\";\n  }\n  return (\n    <ul>\n      {data.user.map(user => {\n        return <li key={user.id}>{user.name}</li>;\n      })}\n    </ul>\n  );\n};\n\nconst Question = ({ name }) => {\n  const { user } = useContext(Context);\n  return (\n    <div>\n      <span>{user.name}'s answer:</span>\n      <form>\n        <input placeholder=\"Answer\" />\n      </form>\n    </div>\n  );\n};\n\nconst Room = ({\n  match: {\n    params: { name }\n  }\n}) => {\n  const resp = useQuery(docs.ROOM_QUERY, {\n    variables: {\n      name\n    }\n  });\n  const data = resp.data && resp.data.room[0];\n  useEffect(() => {\n    if (resp.data) {\n      resp.subscribeToMore({\n        document: docs.SUBSCRIBE_TO_ROOM,\n        variables: { roomId: data.id },\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!subscriptionData.data) return prev;\n          return L.set(\n            [\"room\", 0, \"users\"],\n            subscriptionData.data.room_by_pk.users,\n            prev\n          );\n        }\n      });\n    }\n  }, [resp, data]);\n  if (resp.loading) {\n    return \"Loading...\";\n  }\n  return (\n    <div>\n      <h1>{data.name}</h1>\n      <h3>{data.id}</h3>\n      <h3>{data.questions[0].name}</h3>\n      <Question />\n      <Users name={name} />\n    </div>\n  );\n};\n\nconst Main = () => {\n  const [state, setState] = useState();\n  const { user, setUser } = useContext(Context);\n  const [userName, setUserName] = useState();\n  const [room, setRoom] = useState({});\n  const history = useHistory();\n  const [createRoom] = useMutation(docs.CREATE_ROOM_MUTATION);\n  const [joinRoom, joinRoomResp] = useMutation(docs.JOIN_ROOM_MUTATION);\n  const [roomByName, roomByNameResp] = useLazyQuery(docs.ROOM_BY_NAME_QUERY);\n\n  useEffect(() => {\n    if (!roomByNameResp.loading) {\n      if (roomByNameResp.data && roomByNameResp.data.room.length) {\n        setRoom(roomByNameResp.data.room[0]);\n      }\n    }\n  }, [roomByNameResp]);\n\n  useEffect(() => {\n    if (room.id) {\n      joinRoom({ variables: { name: userName, roomId: room.id } });\n    }\n  }, [room.id, userName, joinRoom]);\n\n  useEffect(() => {\n    if (joinRoomResp.data) {\n      setUser(joinRoomResp.data.insert_user.returning[0]);\n    }\n  }, [joinRoomResp.data, setUser, history]);\n\n  useEffect(() => {\n    if (user) {\n      history.push(`/game/${user.room.name}`);\n    }\n  }, [user, history]);\n  const handleSubmit = (e, { name, code }) => {\n    e.preventDefault();\n    if (state === \"join\") {\n      roomByName({ variables: { name: code } });\n      setUserName(name);\n    }\n  };\n  if (!state) {\n    return (\n      <div>\n        <button>create</button>\n        <button onClick={() => setState(\"join\")}>join</button>\n      </div>\n    );\n  } else if (state === \"join\") {\n    return <JoinForm handleSubmit={handleSubmit} />;\n  } else {\n  }\n};\n\nconst StateProvider = ({ children }) => {\n  const [user, setUser] = useState();\n  return (\n    <Context.Provider value={{ user, setUser }}>{children}</Context.Provider>\n  );\n};\n\nconst Routes = () => {\n  const { user } = useContext(Context);\n  return (\n    <>\n      <Route path=\"/\" exact component={Main} />\n      <ProtectedRoute\n        path=\"/game/:name\"\n        component={Room}\n        loggedIn={user ? true : false}\n      />\n    </>\n  );\n};\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <StateProvider>\n        <Router basename=\"/\">\n          <Switch>\n            <Routes />\n          </Switch>\n        </Router>\n      </StateProvider>\n    </ApolloProvider>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}